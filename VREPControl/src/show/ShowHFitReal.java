package show;

import evolHAEA.HEmP;
import simvrep.EvaluatorMT;
import simvrep.Simulation;
import util.ChromoConversion;

public class ShowHFitReal {

	public static void main(String[] args) {
		
		Simulation sim = new Simulation(0, 5);
		double fitness =1000;
		//String morpho = "[(0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 3.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,0.0, 3.0, 2.0, 1.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,0.0 , 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]";
		String morpho = "[(0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,0.0 , 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]";
		// [( 'Type' 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 'Conn' 1.0, 3.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 'DadFace' 0.0, 3.0, 2.0, 1.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 'Ori'0.0 , 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
		// Type: Only two types available 0 and 1, the root is always 0 and the rest are always 1
		// Conn: The number of modules connected to that module, the first value are modules connected to the root module and so on
		// DadFace: The face to which the module is connected in the parent, root module only has 0,1,2 faces the rest have 1,2,3 since 0 is always occupied by the parent
		// Ori: The orientation of the module, only two orientations available 0 and 1
		// Each position is evaluated after the other: For each module with a type, the number of modules is retrieved, then the children are retrieved and connected to the specified dadfaces, this continues until no more children are found
		//double[] parameters = new double[49];
		double[] parameters = new double[]{0.01,0.3622364313579033,0.936418739865854,0.3283180596258274,-0.10025814704140482,-0.15871625951755616,0.9605772286691339,-1.0,-0.8168595662756225,0.861241394614724,0.6566358070421867,-0.7298615563194211,0.8099430406693848,0.34627480572742725,-0.9566176424487332,1.0,0.004929365510649845,-0.4351727894279494,0.5086622410774376,0.008399871333315802,0.7997999643393547,-0.8901342906483903,1.0,0.982298563695824,0.9975538264041401,0.6510833427451169,-0.7714666629119683,0.17551026974716155,-0.326653934917222,0.20837253629695549,-0.7018537129255544,-0.30331143032443264,-0.5584209422694479,0.5462720877460577,-0.26366566903785876,0.2977842559134953,0.6106275569671396,-0.39518640402967053,0.7440800469305606,-0.344296933074037,0.6517728831108683,-0.4612815173949224,-1.0,-0.5515949208047989,0.19825227205890575,-0.8568467881279956,-0.46268235265824725,0.026124618202766625,-0.1805542032583878,1.0,-1.0,0.26559595399063796,-0.9371286601313847,-0.7460244264497538,0.33494115023808907,0.7700601000714118,-0.7929179178137651,0.11776433058695168,0.9912600031296832,-0.41079917429180246,0.14156763967851071,-1.0,0.9806965373627126,-0.4856877264380035,0.4144852433431895,-1.0,-0.45910728605010487,0.25571521631002975,0.3935987356551269,0.5944503620439768,-0.6932686996378882,-0.3465377132321893,-0.14516895906289315,0.44496052169634515,-0.6848476708561702,0.5392252449660506,-0.5336141075252452,-0.2454477630044319,-0.25094642030825615,0.835644583630814,0.9046908242976978,-0.8237951784451719,-0.2735507211257269,0.7603449651353364,0.722945257053434,-1.0,-1.0,-0.7706056298670078,0.09737964086356238,0.31734678493088797,-0.8996401079632176,1.0,-0.8305991176005277,-0.4066588515151827,0.30280779531005264,0.2083176488940065,-0.17208161952530948,0.14770166669615123,0.05453710820846567,-0.7519794530516708,-0.27598531352014777,-0.125340428348653,0.24830938106230238,-0.6053135831967456,-0.8339546268239512,0.4658413282826147,-0.6486852148495257,-1.0,-0.10400218217849189,-0.8595127009558082,-0.5054323129507003,-0.056046165302249054,0.5528177579668833,-0.053813779232691705,-0.6342505279690287,-0.043683487026476994,0.7659010640041651,-0.4239612035907643,0.46423073868248826,0.5250225864995236,0.3325093285811419,-0.7667908381372939,0.9102794455009726,0.5080288004303783,-0.5662978554285208,-0.10889236749188018,0.640666717680624,-0.7221304136664823,-0.8455572216238669,0.8448280213393395,0.24081028920584888,-0.5711239205619804,0.6249227864331248,0.8880759845307676,0.08935021531511939,0.17629011215763124,-0.005876232025064113,-0.39371507471614064,0.9813737696992594,-0.6321159570027065,0.6297146923316583,0.5017460101382663,-1.0,-0.598008300648809,-0.9166868963424692,-0.6457435992166455,-0.7353279155744445,-0.2792827312581118,0.47990647339157516,0.8232328996054725,0.8836341384761989,0.735530756784594,-0.7539258828635801,0.7562279582276397,-0.38884158267141256,0.6835976344803639,-0.12685500058865654,-0.4201930576258477,-0.9815352953103703,0.9731374897450509,0.6170562639689705,0.6680867911676063,1.0,0.6100320462106945,-0.951987428050414,-0.7591407535984176,0.32579065453724554,-0.27051834062776414,-0.7593279574521228,0.8030545050206688,0.6298829640164971,-0.1094829467369901,-0.5402633409771465,-0.9789643954159197,-0.14684509466805615,-0.23197697815784968,-0.3828261863209321,1.0,0.18066362748272508,-0.06308486003870291,-0.9866571826421747,0.48735137429296416,-0.28805759832072964,0.9338591959444646,0.9098110502544688,0.10413355379739572,0.12631099985783734,-0.7599303737040367,-0.6112289480163281,0.8613646286325813,-0.3836546296150732,-0.05624265494176377,-0.47168913572280713,0.1210654000219471,-0.15632672522814456,0.9464510501886254,-0.9392129446482431,-0.5480530558290171,-0.21482991355708575,-0.645213363596711,0.4537701466103537,0.5017065243255157,-0.8854196328714604,0.642067206393418,0.9792374416442569,-1.0,0.8114751679647302,-0.18364150060767678,0.7734845001376539,-0.602569405537534,0.4498187828692969,0.8034544403350357,0.0040888969230920835,-0.4619931358817272,0.8694553919566993,-0.7894152798830957,0.8334877938462106,0.5267253474690978,0.3879595161641691,-0.07180628073513631,-0.8331127657367168,1.0,-0.16172760110873363,-0.4514952226794676,-0.4519245288129804,-1.0,1.0,0.22676397561928913,-0.07341691850565027,-0.7770610333073498,0.07867479780560083,0.6629263590967381,0.8765121258322057,-1.0,-0.3175077036520094,0.13244029652019562,0.9286019050552454,-0.04204670066754862,0.9445793018621397,0.9580283921487724,0.4066407114974032,0.23165786838905275,0.6051140235139427,0.07336381824956513,-0.1775296494376728,-1.0,1.0,-0.888490418316719,0.6959735346879747,0.9726959446105883,-0.8424742849039067,-0.021746042792372466,0.7238067573115555,-0.8354793160440173,0.03115815953343129,1.0,0.6130364431268921,0.9996811456794514,1.0,-0.7893968639747209,0.3877783403083161,-0.6136327403779915,0.05283133542621479,-0.6046276442436249,-0.6666665450579158,1.0,-0.6268165915463524,0.7389220841883326,-0.5754176807001022,-0.8172891791887991,0.22878999685962695,0.9566016772726096,-0.8745265097551287,0.7859852227890781,-0.2571862393919196,-0.2553714503705789,0.3402403886643778,-0.3636158784527157,0.5170872663256432,-0.8260840643086894,-0.680350172299234};;
		System.out.println("Param length = "+parameters.length);
//		char[][] subenvperm = new char[][] { { 's', 'l', 's', 'b', 's', 'r', 's' },
//			{ 's', 'l', 's', 's', 'r', 's', 'b' }, { 'b', 's', 'l', 's', 's', 'r', 's' },
//			{ 'b', 's', 'r', 's', 's', 'l', 's' }, { 's', 'r', 's', 's', 'l', 's', 'b' },
//			{ 's', 'r', 's', 'b', 's', 'l', 's' }, { 's', 's' } };
//			
//		float width = 0.7f;
		
		
//		for (int i = 1; i < parameters.length; i = i + 6) {	
//			parameters[i] = 0.5;
//			parameters[i+1] = 0;
//		for (int j = 0; j < 4; j++) {
//			parameters[i + j + 2] = -1;
//		}
//	}
		
		for (int i = 1; i < parameters.length; i = i + 35) {
			for (int j = 0; j < 5; j++) {
				parameters[i + j] = 0.5;
				parameters[i + j + 5] = 0;
				parameters[i + j + 30] = 0;	
			}
			for (int j = 0; j < 20; j++) {
				parameters[i + j + 10] = 0.3;
			}
			
		}
		
//		for (int i = 0;i<parameters.length;i++ ){
//			System.out.println(parameters[i]);
//		}
		
		for (int i = 0; i < 5; i++) {
			if (sim.Connect()) {
				break;
			} else {
				// No connection could be established
				System.out.println("Failed connecting to remote API server");
				System.exit(-1);
			}
		}
		
		
//		if (morpho != null && !morpho.equals("")) {
//			double[] morphoDouble = ChromoConversion.str2double(morpho);
//			EvaluatorMT evaluator = new EvaluatorMT(morphoDouble, "defaultmh.ttt", parameters, sim,0.7f,2,subenvperm[6],width);
//			fitness = evaluator.evaluate();
//		}
		
		HEmP opfunc = new HEmP(0.7f,sim,morpho,1,false);
		fitness = opfunc.apply(parameters);
		
		System.out.println("Fitness: "+fitness);
		
		sim.Disconnect();
		
		
	}
	
}
